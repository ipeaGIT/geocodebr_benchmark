data.table::setDT(geocodepro_output)
data.table::setnames(geocodepro_output, old = 'match_type', new = 'match_type_arcgis')
data.table::setnames(geocodepro_output, old = 'lon', new = 'lon_arcgis')
data.table::setnames(geocodepro_output, old = 'x', new = 'lon_arcgis')
data.table::setnames(geocodepro_output, old = 'y', new = 'lat_arcgis')
names(geocodepro_output)
data.table::setnames(geocodepro_output, old = 'Addr_type', new = 'addr_type_arcgis')
# rename columns
geocodepro_output <- sfheaders::sf_to_df(geocodepro_output, fill = T)
head(geocodepro_output)
data.table::setDT(geocodepro_output)
data.table::setnames(geocodepro_output, old = 'Addr_type', new = 'addr_type_arcgis')
data.table::setnames(geocodepro_output, old = 'x', new = 'lon_arcgis')
data.table::setnames(geocodepro_output, old = 'y', new = 'lat_arcgis')
head(geocodebr_output)
data.table::setnames(geocodepro_output, old = 'addr_type_arcgis', new = 'match_type_arcgis')
table(geocodebr_output$match_type)
table(geocodebr_output$match_type)/nrow(geocodebr_output)
e <- reticulate::use_condaenv("C://Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
# Load packages required to define the pipeline:
library(geocodebr)
#library(geocodepro)
library(ipeadatalake)
library(targets)
library(dplyr)
library(bench)
library(data.table)
library(duckdb)
library(arrow)
library(ggplot2)
input_df <- targets::tar_read('sample_data')
# ncores <- 10
# input_df <- input_df[1:10,]
ncores <- 10
# input_df <- input_df[1:10,]
geocodebr_output <- targets::tar_read('geocodebr_output')
geocodepro_output <- geocodepro::geocode(
locations =  input_df,
locator = paste0("../../data-raw/locators/BRA_", ncores, "/BRA.loc"),
cache = FALSE,
address_fields = geocodepro::address_fields_const(
Address_or_Place = "logradouro_com_numero",
Neighborhood = "bairro",
City = "municipio",
State = "uf",
ZIP = "cep")
)
e <- reticulate::use_condaenv("C://Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
geocodepro_output <- geocodepro::geocode(
locations =  input_df,
locator = paste0("../../data-raw/locators/BRA_", ncores, "/BRA.loc"),
cache = FALSE,
address_fields = geocodepro::address_fields_const(
Address_or_Place = "logradouro_com_numero",
Neighborhood = "bairro",
City = "municipio",
State = "uf",
ZIP = "cep")
)
names(geocodebr_output)
data.table::setnames(
x = geocodebr_output,
old = c('lat', 'lon', 'match_type'),
new = c('lat_br', 'lon_br', 'match_type_br'))
names(geocodepro_output)
geocodepro_output <- sfheaders::sf_to_df(geocodepro_output, fill = T)
names(geocodepro_output)
data.table::setnames(
x = geocodepro_output,
old = c('y', 'x', 'Addr_type'),
new = c('lat_pro', 'lon_pro', 'match_type_pro'))
df_equivalencia <- data.frame(
br = 1:12
)
df_equivalencia
df_equivalencia <- data.frame(
br = 1:12,
pro = c(rep('PointAddress',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',4)))
c(rep('PointAddress',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',4))
df_equivalencia <- data.frame(
br = 1:12,
pro = c(rep('PointAddress',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2)))
df_equivalencia
head(geocodebr_output)
summ_br <- geocodebr_output[, .(count=.N), by=match_type_br]
class(geocodebr_output)
# rename columns
data.table::setDT(geocodebr_output)
data.table::setDT(geocodepro_output)
data.table::setnames(
x = geocodebr_output,
old = c('lat', 'lon', 'match_type'),
new = c('lat_br', 'lon_br', 'match_type_br'))
geocodepro_output <- sfheaders::sf_to_df(geocodepro_output, fill = T)
data.table::setnames(
x = geocodepro_output,
old = c('y', 'x', 'Addr_type'),
new = c('lat_pro', 'lon_pro', 'match_type_pro'))
df_equivalencia <- data.frame(
br = 1:12,
pro = c(rep('PointAddress',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2)))
summ_br <- geocodebr_output[, .(count=.N), by=match_type_br]
summ_pro <- geocodepro_output[, .(count=.N), by=match_type_pro]
summ_pro
df_equivalencia <- data.frame(
br = 1:12,
pro = c(rep('PointAddress|StreetAddress|StreetAddressExt',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2)))
df_equivalencia
summ_pro
df_equivalencia <- data.frame(
br = c(1:12, others, NA),
pro = c(rep('PointAddress|StreetAddress|StreetAddressExt',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
df_equivalencia <- data.frame(
br = c(1:12, 'others', NA),
pro = c(rep('PointAddress|StreetAddress|StreetAddressExt',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
df_equivalencia
df_equivalencia <- data.frame(
br = c(1:12, 'others', 'not found'),
pro = c(rep('PointAddress|StreetAddress|StreetAddressExt',4),
rep('StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
df_equivalencia
library(fuzzyjoin)
install.packages('fuzzyjoin')
head(summ_br)
gsub('case_', '', 'case_01')
summ_br[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
summ_br
summ_br <- geocodebr_output[, .(count=.N), by=match_type_br]
summ_br
summ_br[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
options(
TARGETS_VERBOSE = TRUE,
TARGETS_N_CORES = 10 # ver opcoes disponiveis em C:\StreetMap\NewLocators
)
getOption("TARGETS_N_CORES")
input_df
reticulate::use_condaenv(
"C://Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3"
)
localizador <- paste0(
"C://StreetMap/NewLocators/BRA_",
getOption("TARGETS_N_CORES"),
"/BRA.loc"
)
localizador
fields <- geocodepro::address_fields_const(
Address_or_Place = "logradouro_com_numero",
Neighborhood = "bairro",
City = "municipio",
State = "uf",
ZIP = "cep")
getOption("TARGETS_N_CORES")
options(
TARGETS_VERBOSE = TRUE,
TARGETS_N_CORES = 10 # ver opcoes disponiveis em C:\StreetMap\NewLocators
)
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
localizador <- paste0(
"C://StreetMap/NewLocators/BRA_",
getOption("TARGETS_N_CORES"),
"/BRA.loc"
)
localizador
fields <- geocodepro::address_fields_const(
Address_or_Place = "logradouro_com_numero",
Neighborhood = "bairro",
City = "municipio",
State = "uf",
ZIP = "cep")
geocodepro_output <- geocodepro::geocode(
locations =  input_df,
locator = localizador,
cache = FALSE,
address_fields = fields
)
bm
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
library(targets)
tar_make()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
library(targets)
tar_make()
library(targets)
tar_make()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
library(targets)
tar_make()
tar_visnetwork()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_visnetwork()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_visnetwork()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
tar_visnetwork()
geocodebr_fun
input_df
input_df <- targets::tar_read('generate_sample_data')
input_df <- targets::tar_read('sample_data')
# ncores <- 10
benchmark_time <- function(input_df){
# benchmark ----------------------------------------------------------
# bm <- bench::mark(
#   geocodebr = geocodebr_fun(),
#   geocodepro = geocodepro_fun(),
#   check = F,
#   iterations  = 10
# )
bm <- microbenchmark::microbenchmark(
geocodebr = geocodebr_fun(input_df),
arcgis = geocodepro_fun(input_df),
times  = 5
)
return(bm)
}
b=benchmark_time(sample_data)
b=benchmark_time(input_df)
tar_make(geocodepro_output)
tar_make(benchmark_time)
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make(benchmark_time)
tar_make(benchmark_time)
tar_read(benchmark_time)
tar_make(benchmark_time)
tar_read(benchmark_time)
geocodebr = geocodebr_fun(input_df)
head(geocodebr )
rm(geocodebr )
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
tar_visnetwork()
tar_read(benchmark_time)
tar_make()
tar_read(benchmark_time)
tar_visnetwork()
tar_read(benchmark_time)
tar_make()
tar_make()
library(targets)
tar_make()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_make()
tar_read(benchmark_time)
bm <- targets::tar_read('bm')
bm <- targets::tar_read('benchmark_time')
base_fig <- ggplot2::autoplot(bm)
# get mean and median
bm_df <- as.data.table(bm)
bm_df[, time_secs := time/1000000000]
bm_df2 <- bm_df[, .(median = round(median(time_secs),1),
mean = round(mean(time_secs),1)
), by=expr]
fig_time <- ggplot() +
# geom_violin(data=bm_df, aes(x=expr, y=time_secs), fill=NA) +
geom_boxplot(data=bm_df, aes(x=expr, y=time_secs)) +
geom_label(data=bm_df2, aes(x=expr, label=median, y=median+5), color='red') +
labs(y='Time (seconds)', x='') +
scale_y_continuous(limits = c(0,45)) +
theme_classic()
ggsave(plot = fig_time, './figures/fig_time.png',
width = 15, height = 15, units = 'cm')
fig_time
tar_make()
tar_make()
tar_visnetwork()
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_visnetwork()
tar_make()
tar_visnetwork()
geocodepro_output <- targets::tar_read('geocodepro_output')
geocodebr_output <- targets::tar_read('geocodebr_output')
# geocodepro_output <- targets::tar_read('geocodepro_output')
# rename columns
data.table::setDT(geocodebr_output)
data.table::setDT(geocodepro_output)
data.table::setnames(
x = geocodebr_output,
old = c('lat', 'lon', 'match_type'),
new = c('lat_br', 'lon_br', 'match_type_br'))
geocodepro_output <- sfheaders::sf_to_df(geocodepro_output, fill = T)
data.table::setnames(
x = geocodepro_output,
old = c('y', 'x', 'Addr_type'),
new = c('lat_pro', 'lon_pro', 'match_type_pro'))
df_equivalencia <- data.frame(
br = c(1:12, 'others', 'not found'),
pro = c(rep('PointAddress',4),
rep('StreetAddress|StreetAddressExt|StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
head(df_equivalencia)
c(1:12, 'others', 'not found')
length(c(rep('PointAddress',4),
rep('StreetAddress|StreetAddressExt|StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found'))
df_equivalencia
summ_br <- geocodebr_output[, .(count=.N), by=match_type_br]
head(geocodebr_output)
df <- left_join(geocodebr_output, geocodepro_output, by = 'id')
df[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
head(df)
df <- left_join(geocodebr_output, geocodepro_output)
head(geocodebr_output)
df <- left_join(geocodebr_output, geocodepro_output)
df <- left_join(geocodebr_output, geocodepro_output, by = 'id')
df[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
class(df)
head(df)
df_long <- df |> select(id, match_type_br, match_type_pro)
df_long
df |> select(id, match_type_br, match_type_pro) |>
.[, .(count=.N), by=.(match_type_br, match_type_pro)]
df[, .(count=.N), by=.(match_type_br, match_type_pro)]
df_long <- df[, .(count=.N), by=.(match_type_br, match_type_pro)][order(match_type_br)]
df_long
table(geocodepro_output$match_type_pro)
df[, match_type_pro := ifelse(match_type_pro=="", "not found", match_type_pro) ]
table(df$match_type_pro)
df_long <- df[, .(count=.N), by=.(match_type_br, match_type_pro)][order(match_type_br)]
df_long
df_long <- df[, .(count=.N /nrow(df)), by=.(match_type_br, match_type_pro)][order(match_type_br)]
df_long
df_long <- df[, .(count = .N /nrow(df)*100),
by = .(match_type_br, match_type_pro)
][order(match_type_br)]
View(df_long)
df_long[, .(cat_1_to_4 = sum(count[where( match_type_br %in% 1:4)]))]
View(df_long)
df_long
df_pro <- df[, .(count = .N /nrow(df)*100),
by = .(match_type_pro)]
df_pro
df_br <- df[, .(count = .N /nrow(df)*100), by = .(match_type_br)]
df_pro <- df[, .(count = .N /nrow(df)*100), by = .(match_type_pro)]
df_equivalencia <- data.frame(
br = c(1:12, 'others', 'not found'),
pro = c(rep('PointAddress',4),
rep('StreetAddress|StreetAddressExt|StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
df_equivalencia
df_long <- df[, .(count = .N /nrow(df)*100),
by = .(match_type_br, match_type_pro)
][order(match_type_br)]
head(df_long)
df_br
# count performance in each
df_br <- df[, .(count = .N /nrow(df)*100), by = .(match_type_br)][order(count)]
df_pro <- df[, .(count = .N /nrow(df)*100), by = .(match_type_pro)][order(count)]
View(df_br)
# count performance in each
df_br <- df[, .(count = .N /nrow(df)*100), by = .(match_type_br)][order(match_type_br)]
df_pro <- df[, .(count = .N /nrow(df)*100), by = .(match_type_pro)][order(match_type_pro)]
View(df_br)
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_visnetwork()
tar_make()
library()
library(targets)
tar_make()
tar_source('./R/compare_precison.R')
tar_source('./R/compare_precision.R')
source("L:/Proj_acess_oport/git_rafa/geocodebr_benchmark_test/_targets.R")
tar_visnetwork()
tar_make()
df_equivalencia <- data.frame(
br = c('c1_to_4', 'others', 'not found'),
pro = c('PointAddress',
rep('StreetAddress|StreetAddressExt|StreetName',4),
rep('PostalLoc|PostalExt|Postal',2),
rep('Locality',2),
'POI', 'not found')
)
df_equivalencia <- data.frame(
br = c('cat_01|02|03|04', 'cat_05|06|07|08', 'cat_09|10', 'cat_11|12', 'others', 'not found'),
pro = c('PointAddress', 'StreetAddress|StreetAddressExt|StreetName', 'PostalLoc|PostalExt|Postal', 'Locality',
'POI', 'not found')
)
df_equivalencia
geocodebr_output <- targets::tar_read('geocodebr_output')
#
geocodepro_output <- targets::tar_read('geocodepro_output')
# rename columns
data.table::setDT(geocodebr_output)
data.table::setDT(geocodepro_output)
data.table::setnames(
x = geocodebr_output,
old = c('lat', 'lon', 'match_type'),
new = c('lat_br', 'lon_br', 'match_type_br'))
geocodepro_output <- sfheaders::sf_to_df(geocodepro_output, fill = T)
data.table::setnames(
x = geocodepro_output,
old = c('y', 'x', 'Addr_type'),
new = c('lat_pro', 'lon_pro', 'match_type_pro'))
# join tables
df <- left_join(geocodebr_output, geocodepro_output, by = 'id')
df[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
df[, match_type_pro := ifelse(match_type_pro=="", "not found", match_type_pro) ]
df_long <- df[, .(count = .N /nrow(df)*100),
by = .(match_type_br, match_type_pro)
][order(match_type_br)]
# join tables
df <- left_join(geocodebr_output, geocodepro_output, by = 'id')
df[, match_type_br := as.numeric(gsub('case_', '', match_type_br)) ]
table(df$match_type_br)
df[, match_type_br := gsub('case_', '', match_type_br) ]
table(df$match_type_br)
# join tables
df <- left_join(geocodebr_output, geocodepro_output, by = 'id')
df[, match_type_br := gsub('case_', '', match_type_br) ]
table(df$match_type_br)
df[, match_type_pro := ifelse(match_type_pro=="", "not found", match_type_pro) ]
df_long <- df[, .(count = .N /nrow(df)*100),
by = .(match_type_br, match_type_pro)
][order(match_type_br)]
# count performance in each
df_br <- df[, .(count = .N /nrow(df)*100), by = .(match_type_br)][order(match_type_br)]
df_pro <- df[, .(count = .N /nrow(df)*100), by = .(match_type_pro)][order(match_type_pro)]
df_equivalencia <- data.frame(
br = c('cat_01|02|03|04', 'cat_05|06|07|08', 'cat_09|10', 'cat_11|12', 'others', 'not found'),
pro = c('PointAddress', 'StreetAddress|StreetAddressExt|StreetName', 'PostalLoc|PostalExt|Postal', 'Locality',
'POI', 'not found')
)
df_br
df_equivalencia
tar_make()
bm <- targets::tar_read('benchmark_time')
# get mean and median
bm_df <- as.data.table(bm)
bm_df[, time_secs := time/1000000000]
bm_df2 <- bm_df[, .(median = round(median(time_secs),1),
mean = round(mean(time_secs),1)
), by=expr]
bm_df2
fig_time <- ggplot() +
# geom_violin(data=bm_df, aes(x=expr, y=time_secs), fill=NA) +
geom_boxplot(data=bm_df, aes(x=expr, y=time_secs)) +
geom_label(data=bm_df2, aes(x=expr, label=median, y=median+5), color='red') +
labs(y='Time (seconds)', x='') +
scale_y_continuous(limits = c(0,55)) +
theme_classic()
fig_time
fig_time <- ggplot() +
# geom_violin(data=bm_df, aes(x=expr, y=time_secs), fill=NA) +
geom_boxplot(data=bm_df, aes(x=expr, y=time_secs)) +
geom_label(data=bm_df2, aes(x=expr, label=median, y=median+5), color='red') +
labs(y='Time (seconds)', x='') +
scale_y_continuous(limits = c(0,60)) +
theme_classic()
bm_df2
max(bm_df2$mean) + 5
max_time <- max(bm_df2$mean) + 5
fig_time <- ggplot() +
# geom_violin(data=bm_df, aes(x=expr, y=time_secs), fill=NA) +
geom_boxplot(data=bm_df, aes(x=expr, y=time_secs)) +
geom_label(data=bm_df2, aes(x=expr, label=median, y=median+5), color='red') +
labs(y='Time (seconds)', x='') +
scale_y_continuous(limits = c(0, max_time)) +
theme_classic()
fig_time
tar_make()
library(targets)
tar_visnetwork()
